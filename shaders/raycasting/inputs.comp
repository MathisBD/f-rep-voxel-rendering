
#define MAX_LIGHT_COUNT     8
#define MAX_MATERIAL_COUNT  8
#define MAX_LEVEL_COUNT     8

struct VoxelData {
    vec3 normal;
    uint material_idx;
};

struct DirectionalLight {
    vec4 color;
    vec4 direction;
};

struct Material {
    vec4 color;
};

// Output image.
layout (set = 0, binding = 0, rgba8) uniform image2D outImg;

// Shader basic data.
layout (set = 0, binding = 1) uniform UniformBuffer {
    uint lightCount;
    uint materialCount;
    // The valid levels range from 0 to gridLevels-1 included.
    // Level 0 contains the unique root node.
    uint gridLevels;
    uint _padding_;

    vec3 gridWorldCoords;
    float gridWorldSize;

    // The grid dimensions at each level.
    uint gridDims[MAX_LEVEL_COUNT];
    // The offset (in uints) in the node buffer of the nodes at a specific level.
    uint nodeBufferOfs[MAX_LEVEL_COUNT];
    // The offset (in uints) in the child buffer of the nodes at a specific level.
    uint childBufferOfs[MAX_LEVEL_COUNT];

    uvec2 screenResolution;
    vec2 screenWorldSize;

    vec4 cameraPosition;
    vec4 cameraForward;
    vec4 cameraUp;
    vec4 cameraRight;

    vec4 backgroundColor;
    DirectionalLight lights[MAX_LIGHT_COUNT]; 
    Material materials[MAX_MATERIAL_COUNT];
} uniformBuffer;

// Nodes
// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 2) readonly buffer NodeBuffer {
    uint data[];
} nodeBuffer;

layout (std430, set = 0, binding = 3) readonly buffer ChildBuffer {
    uint data[];
} childBuffer;

layout (std430, set = 0, binding = 4) readonly buffer VoxelBuffer {
    VoxelData voxels[];
} voxelBuffer;

// Node structure.
// Sizes are given in uints rather than bytes.
#define NODE_SIZE(level) (1 + (CUBE(uniformBuffer.gridDims[(level)])) >> 4)
#define NODE_OFS_CL_IDX(level)  0
#define NODE_OFS_MASK(level)    1
#define NODE_OFS_MASK_PC(level) (1 + (CUBE(uniformBuffer.gridDims[(level)]) >> 5))

// Child list structure.
// Sizes are given in uints rather than bytes.
#define CL_SIZE(level) CUBE(uniformBuffer.gridDims[(level)])
