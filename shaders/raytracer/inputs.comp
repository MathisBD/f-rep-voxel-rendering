
#constant THREAD_GROUP_SIZE_X
#constant THREAD_GROUP_SIZE_Y
// The valid levels range from 0 to LEVEL_COUNT-1 included.
// Level 0 contains the unique root node, and LEVEL_COUNT-1 the last interior nodes,
// whose only children are leafs (and empty nodes).
#constant LEVEL_COUNT  
#constant LIGHT_COUNT

// Kernel group size.
layout (local_size_x = THREAD_GROUP_SIZE_X, local_size_y = THREAD_GROUP_SIZE_Y) in;
 
#define MAX_LEVEL_COUNT 8
#define MAX_CONST_POOL_SIZE 256
#define MAX_LIGHT_COUNT 8

struct VoxelData {
    vec3 normal;
    uint material_idx;
};

struct DirectionalLight {
    vec4 color;
    vec4 direction;
};

struct LevelData {
    uint dim;
    // Offsets in the node buffers.
    // It is given in uints rather than in bytes.
    uint node_ofs;
    // The world size of a single child cell at this level.
    // The cell_size of the last level (level_count-1) is the voxel size.
    // The cell_size of level 0 is world_size / dim[0].
    float cell_size;
    uint _padding_;
};

// Output image.
layout (set = 0, binding = 0, rgba8) uniform image2DArray out_img;

// Shader basic data.
layout (set = 0, binding = 1) uniform ParamsBuffer {
    // The actual time of this shader's dispatch,
    // used e.g. to seed random functions.
    float time;
    // the time used to evaluate the tape (and thus the normals).
    float tape_time; 
    // which image we are going to right to in the image array
    // (for temporal supersampling).
    uint out_img_layer;
    uint _padding_0;

    vec4 camera_pos;
    vec4 camera_forward;
    vec4 camera_up;
    vec4 camera_right;

    vec3 grid_world_pos;
    float grid_world_size;
    
    uvec2 screen_res;
    vec2 screen_world_size;
    vec4 background_color;

    LevelData levels[MAX_LEVEL_COUNT];
    DirectionalLight lights[MAX_LIGHT_COUNT]; 
    // The tape constant pool.
    vec4 const_pool[MAX_CONST_POOL_SIZE / 4];
} params_buf;

// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 2) readonly buffer NodeBuffer {
    uint data[];
} node_buf;

layout (std430, set = 0, binding = 3) readonly buffer TapeBuffer {
    uint data[];
} tape_buf;

