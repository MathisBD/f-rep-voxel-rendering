
// Node structure.
// Sizes are given in uints rather than bytes.
#define NODE_SIZE(level)                                    \
    ((level) == params_buf.level_count - 1 ?                \
    4 + (CUBE(params_buf.levels[(level)].dim) >> 4) :       \
    4 + 17 * (CUBE(params_buf.levels[(level)].dim) >> 4))

#define NODE_OFS_TAPE_IDX(level)         0
#define NODE_OFS_COORDS(level)           1
#define NODE_OFS_LEAF_MASK(level)        4 
// Nodes on level (params_buf.level_count - 1) don't have
// an interior mask or a child list.
#define NODE_OFS_INTERIOR_MASK(level)    (4 + (CUBE(params_buf.levels[(level)].dim) >> 5))
#define NODE_OFS_CHILD_LIST(level)       (4 + (CUBE(params_buf.levels[(level)].dim) >> 4))


// child_index == INDEX(local position in the node)
bool node_has_leaf_child(uint node_id, uint level, uint child_index)
{
    // get the leaf mask position in the node buffer
    uint mask_pos = 
        params_buf.levels[level].node_ofs +
        NODE_SIZE(level) * node_id +
        NODE_OFS_LEAF_MASK(level);
    return BITSET_LOAD(node_buf.data, mask_pos, child_index);
}

// child_index == INDEX(local position in the node)
bool node_has_interior_child(uint node_id, uint level, uint child_index)
{
    // Make sure we don't read from a non-existant interior mask.
    if (level >= params_buf.level_count - 1) {
        return false;
    }

    // The node's interior mask position in the node buffer.
    uint mask_pos = 
        params_buf.levels[level].node_ofs +
        NODE_SIZE(level) * node_id +
        NODE_OFS_INTERIOR_MASK(level);
    return BITSET_LOAD(node_buf.data, mask_pos, child_index);
}

// child_index == INDEX(local position in the node)
// Returns the node id of the child.
uint node_get_interior_child(uint node_id, uint level, uint child_index)
{
    // The node's child list position in the node buffer.
    uint child_list_pos = 
        params_buf.levels[level].node_ofs +
        NODE_SIZE(level) * node_id +
        NODE_OFS_CHILD_LIST(level);
    return node_buf.data[child_list_pos + child_index];
}

uint node_get_tape_index(uint node, uint level)
{
    uint idx_pos = params_buf.levels[level].node_ofs + 
        node * NODE_SIZE(level) + NODE_OFS_TAPE_IDX(level);
    return node_buf.data[idx_pos];
}

uvec3 node_get_coords(uint node, uint level)
{
    uint coords_pos = params_buf.levels[level].node_ofs +
        node * NODE_SIZE(level) + NODE_OFS_COORDS(level);
    return uvec3(
        node_buf.data[coords_pos + 0],
        node_buf.data[coords_pos + 1],
        node_buf.data[coords_pos + 2]);
}