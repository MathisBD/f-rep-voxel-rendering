#version 450


#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

// Include other files  
//#define DEBUG_LOG
#include "utils.comp"
#include "raycaster/inputs.comp"
#include "tape/tape.comp"
#include "tape/gradient.comp" 
#include "node.comp"
#include "random.comp"


struct Hit {
    float t;
    uint node;
    uint level;
    uint cell_index;
};


// Returns true if there is an intersection.
// A positive value t means the intersection point is at orig + t * dir.
bool raygrid_intersect(vec3 orig, vec3 dir, out float t_enter, out float t_leave)
{
    vec3 invDir = 1.0f / dir;
    vec3 t_0 = (params_buf.grid_world_pos + vec3(EPS, EPS, EPS) - orig) * invDir; 
    vec3 t_1 = (params_buf.grid_world_pos + params_buf.grid_world_size - vec3(EPS, EPS, EPS) - orig) * invDir;
    
#define SWAP(a, b) { float tmp = a; a = b; b = tmp; }
    // We chech invDir.x < 0f rather than t_0.x > t_1.x (almost equivalent),
    // because of numerical stability issues when dir.x == 0f.
    // See the comment in raytrace() for an explanation.
    if (invDir.x < 0.0f) SWAP(t_0.x, t_1.x)
    if (invDir.y < 0.0f) SWAP(t_0.y, t_1.y)
    if (invDir.z < 0.0f) SWAP(t_0.z, t_1.z)
#undef SWAP

    t_enter = MAX_3(t_0.x, t_0.y, t_0.z);
    t_leave = MIN_3(t_1.x, t_1.y, t_1.z);

    return t_enter <= t_leave && t_leave >= 0.0f;
}


bool dda(vec3 orig, vec3 dir, out Hit hit)
{
    // Check the ray intersects the root node.
    float grid_t_enter;
    float grid_t_leave;
    bool hit_grid = raygrid_intersect(orig, dir, grid_t_enter, grid_t_leave);
    if (!hit_grid) {
        return false;
    }

    // DDA parameters. 
    vec3 invDir = 1.0f / dir;
    uint lvl;
    uint node;
    vec3 node_pos;
    float t_curr = max(grid_t_enter, 0.0f) + EPS; // the current time
    float t_max = t_curr;

    //LOG2("\nt_enter=%.3f t_leave=%.3f\n", grid_t_enter, grid_t_leave);
   
    // We use the kd-restart algorithm.
    while (t_max < grid_t_leave - EPS) {
        lvl = 0;
        node = 0;
        node_pos = params_buf.grid_world_pos;
        t_curr = t_max + EPS;
        t_max = grid_t_leave;

        while (t_curr < t_max - EPS) {
            // Prepare
            vec3 norm_pos = (orig + (t_curr + EPS) * dir - node_pos) /
                params_buf.levels[lvl].cell_size; 
            ivec3 cell = ivec3(floor(norm_pos));
            vec3 t_next = (t_curr + EPS) + (cell + SIGN_01(invDir) - norm_pos) * 
                params_buf.levels[lvl].cell_size * invDir;
            uint cell_index = INDEX3D(cell, params_buf.levels[lvl].dim);

            //LOG8("level=%u   node=%u   pos=%.3v3f   cell_size=%.4f   norm_pos=%.3v3f   cell=%v3d   cell_index=%u   node_pos=%.3v3f\n", 
            //    lvl, node, orig + (t_curr + EPS) * dir, params_buf.levels[lvl].cell_size, norm_pos, cell, cell_index, node_world_pos(node, lvl));
      
            if (node_has_leaf_child(node, lvl, cell_index)) {
                hit.t = t_curr;  
                hit.node = node;
                hit.level = lvl;
                hit.cell_index = cell_index;
                //LOG0("Hit voxel\n");
                return true;
            }
            // Recurse in the child
            else if (node_has_interior_child(node, lvl, cell_index)) {
                //LOG0("Recursing in child\n");
                node = node_get_interior_child(node, lvl, cell_index);
                node_pos += cell * params_buf.levels[lvl].cell_size;
                t_max = MIN_3(t_next.x, t_next.y, t_next.z);
                lvl++;
            }
            // No child : step forward 
            else {
                //LOG0("Stepping\n");
                t_curr = MIN_3(t_next.x, t_next.y, t_next.z);
            }
        }
    }
    // We didn't hit anything
    return false;
}



vec4 shade(vec3 ray_orig, vec3 ray_dir, Hit hit)
{
    uint tape = node_get_tape_index(hit.node, hit.level);
    vec3 normal = normalize(tape_eval_gradient(tape, ray_orig + hit.t * ray_dir));

    vec4 diffuse = vec4(0.0f, 0.0f, 0.0f, 0.0f);
    for (uint i = 0; i < params_buf.light_count; i++) {
        DirectionalLight light = params_buf.lights[i];
        
        // Check the light illuminates the voxel
        //vec3 shadow_ray_orig = ray_orig + (hit.t - EPS) * ray_dir; 
        //Hit dummy_hit;
        //bool did_hit = dda(shadow_ray_orig, -light.direction.xyz, dummy_hit);
        //if (!did_hit) {
            // Add the light contribution

            float intensity = max(dot(-light.direction.xyz, normal), 0.0f);
            diffuse += intensity * light.color;
        //}
    }

    vec4 ambient = vec4(0.2f, 0.2f, 0.2f, 1.0f);

    return vec4(1, 1, 1, 1) * (ambient + diffuse);
}



vec4 raytrace(vec3 orig, vec3 dir)
{
    Hit hit;
    bool did_hit = dda(orig, dir, hit);
    if (did_hit) {
        // Something went wrong : show a debug color.
        if (hit.t < 0.0f) {
            return vec4(1, 1, 1, 1);
        }
        // All is good.
        return shade(orig, dir, hit);
    }
    else {
        return params_buf.background_color;
    }
}


void main()
{
    uvec2 gid = gl_GlobalInvocationID.xy;

    if (gid.x < params_buf.screen_res.x && 
        gid.y < params_buf.screen_res.y) 
    {
        random_seed(params_buf.time);

        // Compute the ray direction.
        // We add a small offset to the pixel position for antialiasing.
        vec2 ofs = 2 * vec2(rand() - 0.5f, rand() - 0.5f);
        float dx = 2.0f * ((gid.x + ofs.x) / float(params_buf.screen_res.x)) - 1.0f;
        float dy = 2.0f * ((gid.y + ofs.y) / float(params_buf.screen_res.y)) - 1.0f;
        vec3 dir = normalize(
            params_buf.camera_forward.xyz +
            dx * params_buf.screen_world_size.x * params_buf.camera_right.xyz +
            dy * params_buf.screen_world_size.y * params_buf.camera_up.xyz);

        vec4 color = raytrace(params_buf.camera_pos.xyz, dir);
        ivec3 coords = ivec3(gid, params_buf.out_img_layer);
        imageStore(out_img, coords, color);
    }
}