
// The thread group size must be >= to the half chunk size
#define CHUNK_SIZE (2)
#define HALF_CHUNK_SIZE (CHUNK_SIZE / 2)

shared uint s_chunks[CHUNK_SIZE * THREAD_GROUP_SIZE];
shared uint s_out_pos[THREAD_GROUP_SIZE];
shared uint s_ch_idx[THREAD_GROUP_SIZE];

uint encode_inst(Instruction inst)
{
    return 
        ((inst.op      & 0xFF) << 0)  |
        ((inst.outSlot & 0xFF) << 8)  |
        ((inst.inSlotA & 0xFF) << 16) |
        ((inst.inSlotB & 0xFF) << 24);
}


uint mm_load(uint mm_array[MM_ARRAY_SIZE], uint idx)
{
    uint q = (2*idx) >> 5;
    uint r = (2*idx) & 0x1F;
    return (mm_array[q] >> r) & 0x3;
}

uint get_choice(uint op, uint mm_array[MM_ARRAY_SIZE], uint mm_idx)
{
    uint choice;
    switch (op) {
    case OP_CONSTANT: 
        choice = MM_NONE; break;
    case OP_COS:
    case OP_SIN:
    case OP_EXP:
    case OP_NEG:
    case OP_SQRT:
    case OP_COPY:
        choice = MM_FIRST; break;
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case OP_DIV:
        choice = MM_BOTH; break;
    case OP_MIN:
    case OP_MAX:
        choice = mm_load(mm_array, mm_idx);
        break;
    } 
    return choice;
}

uint thread_index()
{
    /*return gl_LocalInvocationID.x + 
           gl_LocalInvocationID.y * THREAD_GROUP_SIZE_X + 
           gl_LocalInvocationID.z * THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y;*/
    return gl_LocalInvocationID.x;
}

#define COMPACT_HALF_CHUNK()  \
{ \
    uint ch_idx = s_ch_idx[t_idx]; \
    for (uint in_idx = half_chunk * HALF_CHUNK_SIZE; \
        in_idx < (half_chunk + 1) * HALF_CHUNK_SIZE && in_idx < in_size; \
        in_idx++)  \
    { \
        /* Decode the input instruction.*/ \
        Instruction i = tape_read_inst(in_tape, in_idx); \
         \
        /* We have to store this as i.op will be overwritten.*/ \
        const bool is_mm_op = (i.op == OP_MIN || i.op == OP_MAX); \
        if (BITSET_LOAD(keep, 0, in_idx)) { \
            /* Change the min/max operation to a copy operation.*/ \
            if (i.op == OP_MIN || i.op == OP_MAX) { \
                const uint choice = mm_load(mm_array, mm_idx); \
                /* A copy operation only uses its first input (A).*/ \
                if      (choice == MM_FIRST)  { i.op = OP_COPY; } \
                else if (choice == MM_SECOND) { i.op = OP_COPY; i.inSlotA = i.inSlotB; } \
            } \
            /* Copy the instruction to shared memory*/ \
            s_chunks[t_idx * CHUNK_SIZE + ch_idx] = encode_inst(i); \
            ch_idx++; \
        } \
        if (is_mm_op) { mm_idx++; } \
    } \
    s_ch_idx[t_idx] = ch_idx; \
}

void flush_half_chunks()
{
    // Make sure all threads have the same copy of the chunks
    memoryBarrierShared();
    barrier();
    // Copy the chunks that are more than half full
    const uint t_idx = thread_index();
    for (uint copy_t_idx = 0; copy_t_idx < THREAD_GROUP_SIZE; copy_t_idx++) {
        // Copy the first half of the chunk of thread copy_t_idx.
        if (s_ch_idx[copy_t_idx] >= HALF_CHUNK_SIZE && t_idx < HALF_CHUNK_SIZE) {
            // Copy the instruction
            tape_buf.data[s_out_pos[copy_t_idx] + t_idx] = 
                s_chunks[copy_t_idx * CHUNK_SIZE + t_idx];
            // Shift the second half chunk into the first half chunk
            s_chunks[copy_t_idx * CHUNK_SIZE + t_idx] = 
                s_chunks[copy_t_idx * CHUNK_SIZE + HALF_CHUNK_SIZE + t_idx];
        }
    }
    // Update the indices
    memoryBarrierShared();
    barrier();
    if (s_ch_idx[t_idx] >= HALF_CHUNK_SIZE) {
        s_ch_idx[t_idx] -= HALF_CHUNK_SIZE;
        s_out_pos[t_idx] += HALF_CHUNK_SIZE;
    }
}

// This is called only once to write the last half chunk to the out tape.
void flush_end_chunks()
{
    // Make sure all threads have the same copy of the chunks
    memoryBarrierShared();
    barrier();
    const uint t_idx = thread_index();
    for (uint copy_t_idx = 0; copy_t_idx < THREAD_GROUP_SIZE; copy_t_idx++) {
        // Copy up to the first half of the chunk of thread copy_t_idx.
        if (t_idx < s_ch_idx[copy_t_idx]) {
            // Copy the instruction
            uint data = s_chunks[copy_t_idx * CHUNK_SIZE + t_idx];
            tape_buf.data[s_out_pos[copy_t_idx] + t_idx] = data;
        }
    }
    // No need to update shared variables as we
    // are finished shortening.
}

uint claim_out_tape(uint out_size)
{
    // We pad the tape up to a multiple of 32 bytes,
    // to allow coalesced access to the tape's memory.
    uint buf_size = ALIGN(out_size + 1, 32);
    return atomicAdd(counters_buf.tape_index, buf_size);
}

// Only the threads with shorten==true will shorten their tape.
// The others are only used to copy the chunks from shader memory to global memory.
// Returns the tape index of the output tape
// (this can be equal to the input tape if there is nothing to shorten).
uint tape_shorten(bool shorten, uint in_tape, 
    uint mm_array[MM_ARRAY_SIZE], uint mm_size,
    out uint out_size)
{
    // The i-th bit is set if the i-th slot is active.
    // Initially only the output slot is active.
    uint slots[MAX_SLOT_COUNT / 32];
    ZERO_ARRAY(slots, 0, MAX_SLOT_COUNT / 32);
    BITSET_SET(slots, 0, 0);

    // The i-th bit is set if the i-th instruction is kept in the shortened tape.
    uint keep[MAX_TAPE_SIZE / 32];
    ZERO_ARRAY(keep, 0, MAX_TAPE_SIZE / 32);
    // This counts the number of kept instructions.
    out_size = 0;

    // First iterate in reverse over the tape and 
    // record which instructions to keep.
    const uint in_size = tape_read_size(in_tape);
    if (shorten) {
        int idx = int(in_size - 1);
        uint mm_idx = mm_size - 1;
        while (idx >= 0) {
            // Decode the instruction
            Instruction i = tape_read_inst(in_tape, idx);
            if (BITSET_LOAD(slots, 0, i.outSlot)) {
                // We will keep this instruction.
                BITSET_SET(keep, 0, idx);
                out_size++;
                // Activate the right slots.
                const uint choice = get_choice(i.op, mm_array, mm_idx);
                BITSET_CLEAR(slots, 0, i.outSlot);
                if (bool(choice & MM_FIRST))  { BITSET_SET(slots, 0, i.inSlotA); }
                if (bool(choice & MM_SECOND)) { BITSET_SET(slots, 0, i.inSlotB); }
            }
            if (i.op == OP_MIN || i.op == OP_MAX) { mm_idx--; }    
            idx--;
        }   
    }

    // The shortened tape is not shorter :
    // don't copy it.
    shorten = shorten && out_size < in_size;
    const uint out_tape = shorten ? claim_out_tape(out_size) : in_tape;

    // Then iterate forward over the tape and 
    // copy instructions to global memory, using
    // a staging chunk buffer in shared memory
    // to allow coalescing writes to global memory.
    uint mm_idx = 0;
    const uint t_idx = thread_index();
    // Initialize the shared variables.
    ZERO_ARRAY(s_chunks, t_idx * CHUNK_SIZE, CHUNK_SIZE);
    if (shorten) {
        // buffer the write of the tape size.
        s_chunks[t_idx * CHUNK_SIZE] = out_size;
        s_ch_idx[t_idx] = 1;
        s_out_pos[t_idx] = out_tape;
    }
    else {
        // the buffer is empty
        s_ch_idx[t_idx] = 0;
    }
    // Iterate forward over the input tape in blocks of half chunk size.
    for (uint half_chunk = 0; half_chunk < (in_size + HALF_CHUNK_SIZE - 1) / HALF_CHUNK_SIZE; half_chunk++) {
        // Go over half a chunk of input tape
        // and compact it to shared memory.
        if (shorten) {
            COMPACT_HALF_CHUNK();
        }
        // Copy the chunks that are more than half full to global memory
        flush_half_chunks();
    }
    flush_end_chunks();
    return out_tape;
}
