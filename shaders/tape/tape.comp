#define MAX_SLOT_COUNT      128
// The maximum number of instructions per tape.
#define MAX_TAPE_SIZE       (32*128)
// The maximum number of min/max instructions per tape.
#define MAX_MM_OPS          MAX_TAPE_SIZE
// When doing interval evaluation,
// this defines the size of the array that holds
// the configurations for inputs of min/max ops.
// Each configuration is 2 bits (because there are 4 possibilities).
#define MM_ARRAY_SIZE       (MAX_MM_OPS / 16)

#define MM_NONE   0
#define MM_FIRST  1
#define MM_SECOND 2
#define MM_BOTH   (MM_FIRST | MM_SECOND)

#define OP_CONSTANT 0
#define OP_SIN      1
#define OP_COS      2
#define OP_ADD      3
#define OP_SUB      4
#define OP_MUL      5
#define OP_DIV      6
#define OP_MIN      7
#define OP_MAX      8
#define OP_EXP      9
#define OP_NEG      10
#define OP_SQRT     11
#define OP_COPY     12


// An unpacked tape instruction
struct Instruction {
    uint op;
    uint outSlot;
    uint inSlotA;
    uint inSlotB;
};


// Returns the number of instructions in the tape.
uint tape_read_size(uint tape_idx)
{
    return tape_buf.data[tape_idx];
}

Instruction tape_read_inst(uint tape, uint idx)
{
    // Add 1 to skip the tape size.
    uint data = tape_buf.data[tape + idx + 1];

    Instruction inst;
    inst.op      = (data >> 0)  & 0xFF;
    inst.outSlot = (data >> 8)  & 0xFF;
    inst.inSlotA = (data >> 16) & 0xFF;
    inst.inSlotB = (data >> 24) & 0xFF;
    return inst;
}
