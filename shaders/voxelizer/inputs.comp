
#constant THREAD_GROUP_SIZE_X
#constant THREAD_GROUP_SIZE_Y
#constant THREAD_GROUP_SIZE_Z
// The valid levels range from 0 to LEVEL_COUNT-1 included.
// Level 0 contains the unique root node, and LEVEL_COUNT-1 the last interior nodes,
// whose only children are leafs (and empty nodes).
#constant LEVEL_COUNT
// The maximum number of tape slots.
#constant MAX_SLOT_COUNT
// The maximum number of instructions per tape.
#constant MAX_TAPE_SIZE


#define MAX_LEVEL_COUNT 8
#define MAX_CONST_POOL_SIZE 256
#define THREAD_GROUP_SIZE (THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y * THREAD_GROUP_SIZE_Z)

// Each node of the previous level is handled by
// several thread groups.
layout (
    local_size_x = THREAD_GROUP_SIZE_X, 
    local_size_y = THREAD_GROUP_SIZE_Y, 
    local_size_z = THREAD_GROUP_SIZE_Z) in;

struct LevelData {
    uint dim;
    // These are offsets in the node and child buffers.
    // They are given in uints rather than in bytes.
    uint node_ofs;
    // The world size of a single child cell at this level.
    // The cell_size of the last level (level_count-1) is the voxel size.
    // The cell_size of level 0 is world_size / dim[0].
    float cell_size;
    uint _padding_;
};


// Shader basic data.
layout (set = 0, binding = 0) uniform ParamsBuffer {
    uint level;
    float tape_time; // the time value used to evaluate the tape.
    uint _padding_0;
    uint _padding_1;

    vec3 grid_world_pos;
    float grid_world_size;

    LevelData levels[MAX_LEVEL_COUNT];
    // The tape constant pool.
    vec4 const_pool[MAX_CONST_POOL_SIZE / 4];
} params_buf;

// Nodes
// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 1) buffer NodeBuffer {
    uint data[];
} node_buf;

layout (std430, set = 0, binding = 2) buffer TapeBuffer {
    uint data[];
} tape_buf;

// This buffer contains counters that are atomically incremented
// by threads.
layout (std430, set = 0, binding = 3) buffer CountersBuffer {
    uint child_count;
    uint tape_index;
} counters_buf;

layout (std430, set = 0, binding = 4) buffer StatsBuffer {
    uint tape_size_sum[MAX_LEVEL_COUNT];
    uint max_tape_size[MAX_LEVEL_COUNT];
} stats_buf;
