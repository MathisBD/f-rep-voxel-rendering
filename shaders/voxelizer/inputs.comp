
// The number of levels in the grid
// The valid levels range from 0 to level_count-1 included.
// Level 0 contains the unique root node, and level_count-1 the last interior nodes.
layout (constant_id = 0) const uint LEVEL_COUNT = 8;
// The dimensions of the level we are creating
layout (constant_id = 1) const uint NEW_DIM = 16;
// The number of constants in the tape constant pool,
// rounded up to the nearest multiple of 4.
layout (constant_id = 2) const uint CONST_POOL_SIZE = 256;

// Each thread group handles a single node of the previous level.
layout (local_size_x = NEW_DIM, local_size_y = NEW_DIM, local_size_z = NEW_DIM)


struct LevelData {
    uint dim;
    // These are offsets in the node and child buffers.
    // They are given in uints rather than in bytes.
    uint node_ofs;
    uint child_ofs;
    // The world size of a single child cell at this level.
    // The cell_size of the last level (level_count-1) is the voxel size.
    // The cell_size of level 0 is world_size / dim[0].
    float cell_size;
};


// Shader basic data.
layout (set = 0, binding = 0) uniform ParamsBuffer {
    uint new_level;
    uint tape_instr_count;
    uint _padding_[2];

    vec3 grid_world_pos;
    float grid_world_size;

    LevelData levels[LEVEL_COUNT];
    // The tape constant pool.
    vec4 const_pool[CONST_POOL_SIZE / 4];
} params_buf;

// Nodes
// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 1) buffer NodeBuffer {
    uint data[];
} node_buf;

layout (std430, set = 0, binding = 2) buffer ChildBuffer {
    uint data[];
} child_buf;

layout (std430, set = 0, binding = 3) readonly buffer TapeBuffer {
    uint instrs[];
} tape_buf;

// Node structure.
// Sizes are given in uints rather than bytes.
#define NODE_SIZE(level)                 (5 + 3 * (CUBE(params_buf.levels[(level)].dim) >> 5))
#define NODE_OFS_CL_IDX(level)           0
#define NODE_OFS_TAPE_IDX(level)         1
#define NODE_OFS_COORDS(level)           2
#define NODE_OFS_INTERIOR_MASK(level)    5
#define NODE_OFS_INTERIOR_MASK_PC(level) (5 + (CUBE(params_buf.levels[(level)].dim) >> 5))
#define NODE_OFS_LEAF_MASK(level)        (5 + (CUBE(params_buf.levels[(level)].dim) >> 4))
// Child list structure.
// Sizes are given in uints rather than bytes.
#define CL_SIZE(level) CUBE(params_buf.levels[(level)].dim)

