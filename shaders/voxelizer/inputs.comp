#define MAX_LEVEL_COUNT     8
#define MAX_CONST_POOL_SIZE 256


// Each node of the previous level is handled by
// several thread groups.
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;


struct LevelData {
    uint dim;
    // These are offsets in the node and child buffers.
    // They are given in uints rather than in bytes.
    uint node_ofs;
    uint child_ofs;
    // The world size of a single child cell at this level.
    // The cell_size of the last level (level_count-1) is the voxel size.
    // The cell_size of level 0 is world_size / dim[0].
    float cell_size;
};


// Shader basic data.
layout (set = 0, binding = 0) uniform ParamsBuffer {
    uint level_count;
    uint level;
    uint tape_instr_count;
    uint _padding_;

    vec3 grid_world_pos;
    float grid_world_size;

    LevelData levels[MAX_LEVEL_COUNT];
    // The tape constant pool.
    vec4 const_pool[MAX_CONST_POOL_SIZE / 4];
} params_buf;

// Nodes
// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 1) buffer NodeBuffer {
    uint data[];
} node_buf;

layout (std430, set = 0, binding = 2) buffer ChildBuffer {
    uint data[];
} child_buf;

layout (std430, set = 0, binding = 3) readonly buffer TapeBuffer {
    uint instrs[];
} tape_buf;

// Node structure.
// Sizes are given in uints rather than bytes.
#define NODE_SIZE(level)                 (5 + 3 * (CUBE(params_buf.levels[(level)].dim) >> 5))
#define NODE_OFS_CL_IDX(level)           0
#define NODE_OFS_TAPE_IDX(level)         1
#define NODE_OFS_COORDS(level)           2
#define NODE_OFS_INTERIOR_MASK(level)    5
#define NODE_OFS_INTERIOR_MASK_PC(level) (5 + (CUBE(params_buf.levels[(level)].dim) >> 5))
#define NODE_OFS_LEAF_MASK(level)        (5 + (CUBE(params_buf.levels[(level)].dim) >> 4))
// Child list structure.
// Sizes are given in uints rather than bytes.
#define CL_SIZE(level) CUBE(params_buf.levels[(level)].dim)



vec3 node_world_pos(uint node_id, uint level)
{
    uint coords_pos = 
        params_buf.levels[level].node_ofs +
        NODE_SIZE(level) * node_id +
        NODE_OFS_COORDS(level);

    uvec3 coords = uvec3(
        node_buf.data[coords_pos],
        node_buf.data[coords_pos + 1],
        node_buf.data[coords_pos + 2]);

    return params_buf.grid_world_pos +
        vec3(coords) * params_buf.levels[params_buf.level_count - 1].cell_size;
}