#define MAX_LEVEL_COUNT     8
#define MAX_CONST_POOL_SIZE 256

// Each node of the previous level is handled by
// several thread groups.
layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct LevelData {
    uint dim;
    // These are offsets in the node and child buffers.
    // They are given in uints rather than in bytes.
    uint node_ofs;
    // The world size of a single child cell at this level.
    // The cell_size of the last level (level_count-1) is the voxel size.
    // The cell_size of level 0 is world_size / dim[0].
    float cell_size;
    uint _padding_;
};


// Shader basic data.
layout (set = 0, binding = 0) uniform ParamsBuffer {
    uint level_count;
    uint level;
    uint tape_instr_count;
    float tape_time; // the time value used to evaluate the tape.

    vec3 grid_world_pos;
    float grid_world_size;

    LevelData levels[MAX_LEVEL_COUNT];
    // The tape constant pool.
    vec4 const_pool[MAX_CONST_POOL_SIZE / 4];
} params_buf;

// Nodes
// We need the std430 layout here so that the array stride is 4 bytes.
// The std140 layout would round it up to 16 bytes.
layout (std430, set = 0, binding = 1) buffer NodeBuffer {
    uint data[];
} node_buf;

layout (std430, set = 0, binding = 2) buffer TapeBuffer {
    uint data[];
} tape_buf;

// This buffer contains counters that are atomically incremented
// by threads.
layout (std430, set = 0, binding = 3) buffer CountersBuffer {
    uint child_count;
    uint tape_index;
} counters_buf;

layout (std430, set = 0, binding = 4) buffer StatsBuffer {
    uint tape_count[MAX_LEVEL_COUNT];
    uint tape_size_sum[MAX_LEVEL_COUNT];
    uint max_tape_size[MAX_LEVEL_COUNT];
} stats_buf;
